// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Zora from "zora";
import * as OptionalFieldRecords from "../../../src/OptionalFieldRecords.mjs";

function testEqual(t, name, lhs, rhs) {
  t.test(name, async t => {
    t.equal(lhs, rhs, name);
  });
}

Zora.test("optional field record", t => {
  let sample = {};
  sample["a"] = 1;
  sample["b"] = 1;
  let sampleRecord = {
    a: 1,
    b: 1
  };
  let encoded = OptionalFieldRecords.t0_encode(sampleRecord);
  testEqual(t, "encode", encoded, sample);
  let decoded = OptionalFieldRecords.t0_decode(sample);
  testEqual(t, "decode", decoded, {
    TAG: "Ok",
    _0: sampleRecord
  });
});

Zora.test("optional field record: array<int>", t => {
  let sample = {};
  sample["a"] = 1;
  sample["bs"] = [1];
  let sampleRecord_bs = [1];
  let sampleRecord = {
    a: 1,
    bs: sampleRecord_bs
  };
  let encoded = OptionalFieldRecords.t1_encode(sampleRecord);
  testEqual(t, "encode", encoded, sample);
  let decoded = OptionalFieldRecords.t1_decode(sample);
  testEqual(t, "decode", decoded, {
    TAG: "Ok",
    _0: sampleRecord
  });
});

Zora.test("optional field record: array<variant>", t => {
  let sample = {};
  sample["a"] = 1;
  sample["bs"] = ["B1"];
  let sampleRecord_bs = ["B1"];
  let sampleRecord = {
    a: 1,
    bs: sampleRecord_bs
  };
  let encoded = OptionalFieldRecords.t2_encode(sampleRecord);
  testEqual(t, "encode", encoded, sample);
  let decoded = OptionalFieldRecords.t2_decode(sample);
  testEqual(t, "decode", decoded, {
    TAG: "Ok",
    _0: sampleRecord
  });
});

Zora.test("optional field record: omit array<variant>", t => {
  let sample = {};
  sample["a"] = 1;
  let encoded = OptionalFieldRecords.t2_encode({
    a: 1
  });
  testEqual(t, "encode", encoded, sample);
});

export {
  testEqual,
}
/*  Not a pure module */
