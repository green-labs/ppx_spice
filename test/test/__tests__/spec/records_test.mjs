// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Zora from "zora";
import * as Records from "../../../src/Records.mjs";

function testEqual(t, name, lhs, rhs) {
  t.test(name, async t => {
    t.equal(lhs, rhs, name);
  });
}

let deepEqualWithBigInt = ((a, b) => {
  if (typeof a === 'bigint' && typeof b === 'bigint') {
    return a === b;
  }
  if (typeof a !== typeof b) return false;
  if (typeof a === 'object' && a !== null && b !== null) {
    const keysA = Object.keys(a);
    const keysB = Object.keys(b);
    if (keysA.length !== keysB.length) return false;
    return keysA.every(key => deepEqualWithBigInt(a[key], b[key]));
  }
  return a === b;
});

Zora.test("record with @spice.key", t => {
  let sample = {};
  sample["spice-label"] = "sample";
  sample["spice-value"] = 1.0;
  let sampleRecord = {
    label: "sample",
    value: 1
  };
  let encoded = Records.t_encode(sampleRecord);
  testEqual(t, "encode", encoded, sample);
  let decoded = Records.t_decode(sample);
  testEqual(t, "decode", decoded, {
    TAG: "Ok",
    _0: sampleRecord
  });
});

Zora.test("record without @spice.key", t => {
  let sample = {};
  sample["label"] = "sample";
  sample["value"] = 1.0;
  let sampleRecord = {
    label: "sample",
    value: 1
  };
  let encoded = Records.t1_encode(sampleRecord);
  testEqual(t, "encode", encoded, sample);
  let decoded = Records.t1_decode(sample);
  testEqual(t, "decode", decoded, {
    TAG: "Ok",
    _0: sampleRecord
  });
});

Zora.test("record with optional field", t => {
  let sample1 = {};
  sample1["label"] = "sample";
  sample1["value"] = 1.0;
  let sampleRecord1 = {
    label: "sample",
    value: 1
  };
  let encoded = Records.tOp_encode(sampleRecord1);
  testEqual(t, "encode", encoded, sample1);
  let decoded = Records.tOp_decode(sample1);
  testEqual(t, "decode", decoded, {
    TAG: "Ok",
    _0: sampleRecord1
  });
  let sample2 = {};
  sample2["label"] = "sample";
  let encoded$1 = Records.tOp_encode({
    label: "sample"
  });
  testEqual(t, "encode omit optional field", encoded$1, sample2);
  let sample3 = {};
  let encoded$2 = Records.tOp_encode({});
  testEqual(t, "encode omit optional field with None field", encoded$2, sample3);
});

Zora.test("record with null", t => {
  let sample = {};
  sample["n"] = null;
  sample["n2"] = "n2";
  let sampleRecord_n = null;
  let sampleRecord = {
    n: sampleRecord_n,
    n2: "n2"
  };
  let encoded = Records.t2_encode(sampleRecord);
  testEqual(t, "encode", encoded, sample);
  let decoded = Records.t2_decode(sample);
  ((sampleRecord["o"]= undefined));
  ((sampleRecord["on"]= undefined));
  testEqual(t, "decode", decoded, {
    TAG: "Ok",
    _0: sampleRecord
  });
});

Zora.test("record with spice.default", t => {
  let sample = {};
  let sample2 = {};
  sample2["value"] = 0.0;
  sample2["value2"] = 1.0;
  let sampleRecord = {
    value: 0,
    value2: 1
  };
  let encoded = Records.t3_encode(sampleRecord);
  testEqual(t, "encode", encoded, sample2);
  let decoded = Records.t3_decode(sample);
  testEqual(t, "decode", decoded, {
    TAG: "Ok",
    _0: sampleRecord
  });
});

Zora.test("record with bigint", t => {
  let sample = {};
  sample["a"] = 0.0;
  sample["b"] = 1.0;
  let sampleRecord = {
    a: 0n,
    b: 1n
  };
  let encoded = Records.t4_encode(sampleRecord);
  testEqual(t, "encode", encoded, sample);
  let decoded = Records.t4_decode(sample);
  ((sampleRecord["c"] = undefined));
  t.ok(deepEqualWithBigInt(decoded, {
    TAG: "Ok",
    _0: sampleRecord
  }), "decode");
});

export {
  testEqual,
  deepEqualWithBigInt,
}
/*  Not a pure module */
