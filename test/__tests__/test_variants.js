// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Jest = require("@glennsl/bs-jest/src/jest.js");
var Variants = require("../src/Variants.js");

Jest.describe("variants with @spice.as", (function (param) {
        Jest.test("encode 하나", (function (param) {
                var variantEncoded = Variants.t_encode(/* One */0);
                return Jest.Expect.toEqual("하나", Jest.Expect.expect(variantEncoded));
              }));
        Jest.test("encode 둘", (function (param) {
                var variantEncoded = Variants.t_encode(/* Two */1);
                return Jest.Expect.toEqual("둘", Jest.Expect.expect(variantEncoded));
              }));
        Jest.test("decode 하나", (function (param) {
                var variantDecoded = Variants.t_decode("하나");
                return Jest.Expect.toEqual({
                            TAG: /* Ok */0,
                            _0: /* One */0
                          }, Jest.Expect.expect(variantDecoded));
              }));
        Jest.test("decode 둘", (function (param) {
                var variantDecoded = Variants.t_decode("둘");
                return Jest.Expect.toEqual({
                            TAG: /* Ok */0,
                            _0: /* Two */1
                          }, Jest.Expect.expect(variantDecoded));
              }));
      }));

Jest.describe("variants without @spice.as", (function (param) {
        Jest.test("encode One1", (function (param) {
                var variantEncoded = Variants.t1_encode(/* One1 */0);
                return Jest.Expect.toEqual(["One1"], Jest.Expect.expect(variantEncoded));
              }));
        Jest.test("encode Two1", (function (param) {
                var variantEncoded = Variants.t1_encode(/* Two1 */1);
                return Jest.Expect.toEqual(["Two1"], Jest.Expect.expect(variantEncoded));
              }));
        Jest.test("decode [\"One1\"]", (function (param) {
                var variantDecoded = Variants.t1_decode(["One1"]);
                return Jest.Expect.toEqual({
                            TAG: /* Ok */0,
                            _0: /* One1 */0
                          }, Jest.Expect.expect(variantDecoded));
              }));
        Jest.test("decode [\"Two1\"]", (function (param) {
                var variantDecoded = Variants.t1_decode(["Two1"]);
                return Jest.Expect.toEqual({
                            TAG: /* Ok */0,
                            _0: /* Two1 */1
                          }, Jest.Expect.expect(variantDecoded));
              }));
      }));

Jest.describe("unboxed variants with @spice.as", (function (param) {
        Jest.test("encode 하나", (function (param) {
                var variantEncoded = Variants.t2_encode(0);
                return Jest.Expect.toEqual(0.0, Jest.Expect.expect(variantEncoded));
              }));
        Jest.test("decode 하나", (function (param) {
                var variantDecoded = Variants.t2_decode(0.0);
                return Jest.Expect.toEqual({
                            TAG: /* Ok */0,
                            _0: 0
                          }, Jest.Expect.expect(variantDecoded));
              }));
      }));

Jest.describe("unboxed variants without @spice.as", (function (param) {
        Jest.test("encode One3(0)", (function (param) {
                var variantEncoded = Variants.t3_encode(0);
                return Jest.Expect.toEqual(0.0, Jest.Expect.expect(variantEncoded));
              }));
        Jest.test("decode 0", (function (param) {
                var variantDecoded = Variants.t3_decode(0.0);
                return Jest.Expect.toEqual({
                            TAG: /* Ok */0,
                            _0: 0
                          }, Jest.Expect.expect(variantDecoded));
              }));
      }));

/*  Not a pure module */
