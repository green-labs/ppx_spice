// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Jest = require("@glennsl/bs-jest/src/jest.js");
var Polyvariants = require("../src/Polyvariants.js");

Jest.describe("polymorphic variants with attribute", (function (param) {
        Jest.test("encode 하나", (function (param) {
                var polyvariantEncoded = Polyvariants.t_encode("one");
                return Jest.Expect.toEqual("하나", Jest.Expect.expect(polyvariantEncoded));
              }));
        Jest.test("encode 둘", (function (param) {
                var polyvariantEncoded = Polyvariants.t_encode("two");
                return Jest.Expect.toEqual("둘", Jest.Expect.expect(polyvariantEncoded));
              }));
        Jest.test("decode 하나", (function (param) {
                var polyvariantDecoded = Polyvariants.t_decode("하나");
                return Jest.Expect.toEqual({
                            TAG: /* Ok */0,
                            _0: "one"
                          }, Jest.Expect.expect(polyvariantDecoded));
              }));
        Jest.test("decode 둘", (function (param) {
                var polyvariantDecoded = Polyvariants.t_decode("둘");
                return Jest.Expect.toEqual({
                            TAG: /* Ok */0,
                            _0: "two"
                          }, Jest.Expect.expect(polyvariantDecoded));
              }));
      }));

Jest.describe("polymorphic variants", (function (param) {
        Jest.test("encode #one", (function (param) {
                var polyvariantEncoded = Polyvariants.t1_encode("one");
                return Jest.Expect.toEqual(["one"], Jest.Expect.expect(polyvariantEncoded));
              }));
        Jest.test("encode #two", (function (param) {
                var polyvariantEncoded = Polyvariants.t1_encode("two");
                return Jest.Expect.toEqual(["two"], Jest.Expect.expect(polyvariantEncoded));
              }));
        Jest.test("decode one", (function (param) {
                var polyvariantDecoded = Polyvariants.t1_decode(["one"]);
                return Jest.Expect.toEqual({
                            TAG: /* Ok */0,
                            _0: "one"
                          }, Jest.Expect.expect(polyvariantDecoded));
              }));
        Jest.test("decode two", (function (param) {
                var polyvariantDecoded = Polyvariants.t1_decode(["two"]);
                return Jest.Expect.toEqual({
                            TAG: /* Ok */0,
                            _0: "two"
                          }, Jest.Expect.expect(polyvariantDecoded));
              }));
      }));

/*  Not a pure module */
