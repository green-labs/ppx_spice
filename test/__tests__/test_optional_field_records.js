// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Jest = require("@glennsl/bs-jest/src/jest.js");
var OptionalFieldRecords = require("../src/OptionalFieldRecords.js");

Jest.describe("optional field record", (function (param) {
        var sample = {};
        sample["a"] = 1;
        sample["b"] = 1;
        var sampleRecord = {
          a: 1,
          b: 1
        };
        Jest.test("encode", (function (param) {
                var encoded = OptionalFieldRecords.t0_encode(sampleRecord);
                return Jest.Expect.toEqual(sample, Jest.Expect.expect(encoded));
              }));
        Jest.test("decode", (function (param) {
                var decoded = OptionalFieldRecords.t0_decode(sample);
                return Jest.Expect.toEqual({
                            TAG: /* Ok */0,
                            _0: sampleRecord
                          }, Jest.Expect.expect(decoded));
              }));
      }));

Jest.describe("optional field record: array<int>", (function (param) {
        var sample = {};
        sample["a"] = 1;
        sample["bs"] = [1];
        var sampleRecord_bs = [1];
        var sampleRecord = {
          a: 1,
          bs: sampleRecord_bs
        };
        Jest.test("encode", (function (param) {
                var encoded = OptionalFieldRecords.t1_encode(sampleRecord);
                return Jest.Expect.toEqual(sample, Jest.Expect.expect(encoded));
              }));
        Jest.test("decode", (function (param) {
                var decoded = OptionalFieldRecords.t1_decode(sample);
                return Jest.Expect.toEqual({
                            TAG: /* Ok */0,
                            _0: sampleRecord
                          }, Jest.Expect.expect(decoded));
              }));
      }));

Jest.describe("optional field record: array<variant>", (function (param) {
        var sample = {};
        sample["a"] = 1;
        sample["bs"] = ["B1"];
        var sampleRecord_bs = [/* B1 */1];
        var sampleRecord = {
          a: 1,
          bs: sampleRecord_bs
        };
        Jest.test("encode", (function (param) {
                var encoded = OptionalFieldRecords.t2_encode(sampleRecord);
                return Jest.Expect.toEqual(sample, Jest.Expect.expect(encoded));
              }));
        Jest.test("decode", (function (param) {
                var decoded = OptionalFieldRecords.t2_decode(sample);
                return Jest.Expect.toEqual({
                            TAG: /* Ok */0,
                            _0: sampleRecord
                          }, Jest.Expect.expect(decoded));
              }));
      }));

Jest.describe("optional field record: omit array<variant>", (function (param) {
        var sample = {};
        sample["a"] = 1;
        var sampleRecord = {
          a: 1
        };
        Jest.test("encode", (function (param) {
                var encoded = OptionalFieldRecords.t2_encode(sampleRecord);
                return Jest.Expect.toEqual(sample, Jest.Expect.expect(encoded));
              }));
        Jest.test("decode", (function (param) {
                var decoded = OptionalFieldRecords.t2_decode(sample);
                return Jest.Expect.toEqual({
                            TAG: /* Ok */0,
                            _0: sampleRecord
                          }, Jest.Expect.expect(decoded));
              }));
      }));

/*  Not a pure module */
