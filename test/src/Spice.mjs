// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "rescript/lib/es6/curry.js";
import * as Js_dict from "rescript/lib/es6/js_dict.js";
import * as Js_math from "rescript/lib/es6/js_math.js";
import * as Js_array from "rescript/lib/es6/js_array.js";
import * as Belt_List from "rescript/lib/es6/belt_List.js";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Caml_int64 from "rescript/lib/es6/caml_int64.js";
import * as Belt_Result from "rescript/lib/es6/belt_Result.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Spice_Codecs from "./Spice_Codecs.mjs";

function error(path, message, value) {
  var path$1 = path !== undefined ? path : "";
  return {
          TAG: "Error",
          _0: {
            path: path$1,
            message: message,
            value: value
          }
        };
}

function stringToJson(s) {
  return s;
}

function stringFromJson(j) {
  if (!Array.isArray(j) && (j === null || typeof j !== "object") && typeof j !== "number" && typeof j !== "string" && typeof j !== "boolean" || typeof j !== "string") {
    return {
            TAG: "Error",
            _0: {
              path: "",
              message: "Not a string",
              value: j
            }
          };
  } else {
    return {
            TAG: "Ok",
            _0: j
          };
  }
}

function intToJson(i) {
  return i;
}

function intFromJson(j) {
  if (!Array.isArray(j) && (j === null || typeof j !== "object") && typeof j !== "number" && typeof j !== "string" && typeof j !== "boolean" || typeof j !== "number") {
    return {
            TAG: "Error",
            _0: {
              path: "",
              message: "Not a number",
              value: j
            }
          };
  } else if (Js_math.floor(j) === j) {
    return {
            TAG: "Ok",
            _0: Js_math.floor(j)
          };
  } else {
    return {
            TAG: "Error",
            _0: {
              path: "",
              message: "Not an integer",
              value: j
            }
          };
  }
}

function int64ToJson(i) {
  return Caml_int64.float_of_bits(i);
}

function int64FromJson(j) {
  if (!Array.isArray(j) && (j === null || typeof j !== "object") && typeof j !== "number" && typeof j !== "string" && typeof j !== "boolean" || typeof j !== "number") {
    return error(undefined, "Not a number", j);
  } else {
    return {
            TAG: "Ok",
            _0: Caml_int64.bits_of_float(j)
          };
  }
}

var int64ToJsonUnsafe = Caml_int64.to_float;

function int64FromJsonUnsafe(j) {
  if (!Array.isArray(j) && (j === null || typeof j !== "object") && typeof j !== "number" && typeof j !== "string" && typeof j !== "boolean" || typeof j !== "number") {
    return error(undefined, "Not a number", j);
  } else {
    return {
            TAG: "Ok",
            _0: Caml_int64.of_float(j)
          };
  }
}

function floatToJson(v) {
  return v;
}

function floatFromJson(j) {
  if (!Array.isArray(j) && (j === null || typeof j !== "object") && typeof j !== "number" && typeof j !== "string" && typeof j !== "boolean" || typeof j !== "number") {
    return {
            TAG: "Error",
            _0: {
              path: "",
              message: "Not a number",
              value: j
            }
          };
  } else {
    return {
            TAG: "Ok",
            _0: j
          };
  }
}

function boolToJson(v) {
  if (v) {
    return true;
  } else {
    return false;
  }
}

function boolFromJson(j) {
  if (!Array.isArray(j) && (j === null || typeof j !== "object") && typeof j !== "number" && typeof j !== "string" && typeof j !== "boolean" || typeof j !== "boolean") {
    return {
            TAG: "Error",
            _0: {
              path: "",
              message: "Not a boolean",
              value: j
            }
          };
  } else if (j) {
    return {
            TAG: "Ok",
            _0: true
          };
  } else {
    return {
            TAG: "Ok",
            _0: false
          };
  }
}

function unitToJson(param) {
  return 0.0;
}

function unitFromJson(param) {
  return {
          TAG: "Ok",
          _0: undefined
        };
}

function arrayToJson(encoder, arr) {
  return Js_array.map(encoder, arr);
}

function arrayFromJson(decoder, json) {
  if (!Array.isArray(json) && (json === null || typeof json !== "object") && typeof json !== "number" && typeof json !== "string" && typeof json !== "boolean" || !Array.isArray(json)) {
    return {
            TAG: "Error",
            _0: {
              path: "",
              message: "Not an array",
              value: json
            }
          };
  } else {
    return Js_array.reducei((function (acc, jsonI, i) {
                  var match = Curry._1(decoder, jsonI);
                  if (acc.TAG !== "Ok") {
                    return acc;
                  }
                  if (match.TAG === "Ok") {
                    return {
                            TAG: "Ok",
                            _0: Js_array.concat([match._0], acc._0)
                          };
                  }
                  var error = match._0;
                  return {
                          TAG: "Error",
                          _0: {
                            path: "[" + (String(i) + ("]" + error.path)),
                            message: error.message,
                            value: error.value
                          }
                        };
                }), {
                TAG: "Ok",
                _0: []
              }, json);
  }
}

function listToJson(encoder, list) {
  var arr = Belt_List.toArray(list);
  return Js_array.map(encoder, arr);
}

function listFromJson(decoder, json) {
  return Belt_Result.map(arrayFromJson(decoder, json), Belt_List.fromArray);
}

function filterOptional(arr) {
  return Belt_Array.keepMap(arr, (function (param) {
                var v = param[1];
                if (v !== undefined) {
                  return [
                          param[0],
                          Caml_option.valFromOption(v)
                        ];
                }
                
              }));
}

function optionToJson(encoder, opt) {
  if (opt !== undefined) {
    return Curry._1(encoder, Caml_option.valFromOption(opt));
  }
  
}

function optionFromJson(decoder, json) {
  if (!Array.isArray(json) && (json === null || typeof json !== "object") && typeof json !== "number" && typeof json !== "string" && typeof json !== "boolean") {
    return {
            TAG: "Ok",
            _0: undefined
          };
  } else {
    return Belt_Result.map(Curry._1(decoder, json), (function (v) {
                  return Caml_option.some(v);
                }));
  }
}

function nullToJson(encoder, opt) {
  if (opt === null) {
    return null;
  } else {
    return Curry._1(encoder, opt);
  }
}

function nullFromJson(decoder, json) {
  if (!Array.isArray(json) && (json === null || typeof json !== "object") && typeof json !== "number" && typeof json !== "string" && typeof json !== "boolean") {
    return {
            TAG: "Ok",
            _0: null
          };
  } else {
    return Belt_Result.map(Curry._1(decoder, json), (function (v) {
                  return v;
                }));
  }
}

function resultToJson(okEncoder, errorEncoder, result) {
  var tmp;
  tmp = result.TAG === "Ok" ? [
      "Ok",
      Curry._1(okEncoder, result._0)
    ] : [
      "Error",
      Curry._1(errorEncoder, result._0)
    ];
  return tmp;
}

function resultFromJson(okDecoder, errorDecoder, json) {
  if (!Array.isArray(json) && (json === null || typeof json !== "object") && typeof json !== "number" && typeof json !== "string" && typeof json !== "boolean") {
    return error(undefined, "Not an array", json);
  }
  if (!Array.isArray(json)) {
    return error(undefined, "Not an array", json);
  }
  if (json.length !== 2) {
    return error(undefined, "Expected exactly 2 values in array", json);
  }
  var variantConstructorId = json[0];
  var payload = json[1];
  if (!Array.isArray(variantConstructorId) && (variantConstructorId === null || typeof variantConstructorId !== "object") && typeof variantConstructorId !== "number" && typeof variantConstructorId !== "string" && typeof variantConstructorId !== "boolean") {
    return error(undefined, "Not a string", variantConstructorId);
  }
  if (typeof variantConstructorId !== "string") {
    return error(undefined, "Not a string", variantConstructorId);
  }
  switch (variantConstructorId) {
    case "Error" :
        var v = Curry._1(errorDecoder, payload);
        if (v.TAG === "Ok") {
          return {
                  TAG: "Ok",
                  _0: {
                    TAG: "Error",
                    _0: v._0
                  }
                };
        } else {
          return {
                  TAG: "Error",
                  _0: v._0
                };
        }
    case "Ok" :
        return Belt_Result.map(Curry._1(okDecoder, payload), (function (v) {
                      return {
                              TAG: "Ok",
                              _0: v
                            };
                    }));
    default:
      return error(undefined, "Expected either \"Ok\" or \"Error\"", variantConstructorId);
  }
}

function dictToJson(encoder, dict) {
  return Js_dict.map(Curry.__1(encoder), dict);
}

function dictFromJson(decoder, json) {
  if (!Array.isArray(json) && (json === null || typeof json !== "object") && typeof json !== "number" && typeof json !== "string" && typeof json !== "boolean" || !(typeof json === "object" && !Array.isArray(json))) {
    return {
            TAG: "Error",
            _0: {
              path: "",
              message: "Not a dict",
              value: json
            }
          };
  } else {
    return Belt_Array.reduce(Js_dict.entries(json), {
                TAG: "Ok",
                _0: {}
              }, (function (acc, param) {
                  var key = param[0];
                  var match = Curry._1(decoder, param[1]);
                  if (acc.TAG !== "Ok") {
                    return acc;
                  }
                  var prev = acc._0;
                  if (match.TAG === "Ok") {
                    prev[key] = match._0;
                    return {
                            TAG: "Ok",
                            _0: prev
                          };
                  }
                  var error = match._0;
                  return {
                          TAG: "Error",
                          _0: {
                            path: "." + (key + error.path),
                            message: error.message,
                            value: error.value
                          }
                        };
                }));
  }
}

var string = [
  stringToJson,
  stringFromJson
];

var $$int = [
  intToJson,
  intFromJson
];

var int64Unsafe = [
  int64ToJsonUnsafe,
  int64FromJsonUnsafe
];

var $$float = [
  floatToJson,
  floatFromJson
];

var bool = [
  boolToJson,
  boolFromJson
];

var array = [
  arrayToJson,
  arrayFromJson
];

var list = [
  listToJson,
  listFromJson
];

var option = [
  optionToJson,
  optionFromJson
];

var unit = [
  unitToJson,
  unitFromJson
];

var Codecs = {
  falseableEncode: Spice_Codecs.falseableEncode,
  falseableDecode: Spice_Codecs.falseableDecode,
  falseable: Spice_Codecs.falseable,
  magicDecode: Spice_Codecs.magicDecode,
  magic: Spice_Codecs.magic,
  string: string,
  $$int: $$int,
  int64Unsafe: int64Unsafe,
  $$float: $$float,
  bool: bool,
  array: array,
  list: list,
  option: option,
  unit: unit
};

export {
  error ,
  stringToJson ,
  stringFromJson ,
  intToJson ,
  intFromJson ,
  int64ToJson ,
  int64FromJson ,
  int64ToJsonUnsafe ,
  int64FromJsonUnsafe ,
  floatToJson ,
  floatFromJson ,
  boolToJson ,
  boolFromJson ,
  unitToJson ,
  unitFromJson ,
  arrayToJson ,
  arrayFromJson ,
  listToJson ,
  listFromJson ,
  filterOptional ,
  optionToJson ,
  optionFromJson ,
  nullToJson ,
  nullFromJson ,
  resultToJson ,
  resultFromJson ,
  dictToJson ,
  dictFromJson ,
  Codecs ,
}
/* No side effect */
