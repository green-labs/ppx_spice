// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Spice from "./Spice.mjs";
import * as Js_dict from "rescript/lib/es6/Js_dict.js";
import * as Belt_Option from "rescript/lib/es6/Belt_Option.js";

function params_encode(v) {
  let extra = v.width;
  let extra$1 = v.height;
  let extra$2 = v.animation;
  let extra$3 = v.focusInput;
  let extra$4 = v.autoMapping;
  let extra$5 = v.shorthand;
  let extra$6 = v.pleaseReadGuide;
  let extra$7 = v.pleaseReadGuideTimer;
  let extra$8 = v.maxSuggestItems;
  let extra$9 = v.showMoreHName;
  let extra$10 = v.hideMapBtn;
  let extra$11 = v.hideEngBtn;
  let extra$12 = v.alwaysShowEngAddr;
  let extra$13 = v.useBannerLink;
  let extra$14 = v.submitMode;
  return Js_dict.fromArray(Spice.filterOptional([
    [
      "width",
      Spice.optionToJson(Spice.floatToJson, extra)
    ],
    [
      "height",
      Spice.optionToJson(Spice.floatToJson, extra$1)
    ],
    [
      "animation",
      Spice.optionToJson(Spice.boolToJson, extra$2)
    ],
    [
      "focusInput",
      Spice.optionToJson(Spice.boolToJson, extra$3)
    ],
    [
      "autoMapping",
      Spice.optionToJson(Spice.boolToJson, extra$4)
    ],
    [
      "shorthand",
      Spice.optionToJson(Spice.boolToJson, extra$5)
    ],
    [
      "pleaseReadGuide",
      Spice.optionToJson(Spice.intToJson, extra$6)
    ],
    [
      "pleaseReadGuideTimer",
      Spice.optionToJson(Spice.floatToJson, extra$7)
    ],
    [
      "maxSuggestItems",
      Spice.optionToJson(Spice.intToJson, extra$8)
    ],
    [
      "showMoreHName",
      Spice.optionToJson(Spice.boolToJson, extra$9)
    ],
    [
      "hideMapBtn",
      Spice.optionToJson(Spice.boolToJson, extra$10)
    ],
    [
      "hideEngBtn",
      Spice.optionToJson(Spice.boolToJson, extra$11)
    ],
    [
      "alwaysShowEngAddr",
      Spice.optionToJson(Spice.boolToJson, extra$12)
    ],
    [
      "useBannerLink",
      Spice.optionToJson(Spice.boolToJson, extra$13)
    ],
    [
      "submitMode",
      Spice.optionToJson(Spice.boolToJson, extra$14)
    ]
  ]));
}

function params_decode(v) {
  if (typeof v !== "object" || v === null || Array.isArray(v)) {
    return Spice.error(undefined, "Not an object", v);
  }
  let width_result = Belt_Option.getWithDefault(Belt_Option.map(Js_dict.get(v, "width"), extra => Spice.optionFromJson(Spice.floatFromJson, extra)), {
    TAG: "Ok",
    _0: undefined
  });
  let height_result = Belt_Option.getWithDefault(Belt_Option.map(Js_dict.get(v, "height"), extra => Spice.optionFromJson(Spice.floatFromJson, extra)), {
    TAG: "Ok",
    _0: undefined
  });
  let animation_result = Belt_Option.getWithDefault(Belt_Option.map(Js_dict.get(v, "animation"), extra => Spice.optionFromJson(Spice.boolFromJson, extra)), {
    TAG: "Ok",
    _0: undefined
  });
  let focusInput_result = Belt_Option.getWithDefault(Belt_Option.map(Js_dict.get(v, "focusInput"), extra => Spice.optionFromJson(Spice.boolFromJson, extra)), {
    TAG: "Ok",
    _0: undefined
  });
  let autoMapping_result = Belt_Option.getWithDefault(Belt_Option.map(Js_dict.get(v, "autoMapping"), extra => Spice.optionFromJson(Spice.boolFromJson, extra)), {
    TAG: "Ok",
    _0: undefined
  });
  let shorthand_result = Belt_Option.getWithDefault(Belt_Option.map(Js_dict.get(v, "shorthand"), extra => Spice.optionFromJson(Spice.boolFromJson, extra)), {
    TAG: "Ok",
    _0: undefined
  });
  let pleaseReadGuide_result = Belt_Option.getWithDefault(Belt_Option.map(Js_dict.get(v, "pleaseReadGuide"), extra => Spice.optionFromJson(Spice.intFromJson, extra)), {
    TAG: "Ok",
    _0: undefined
  });
  let pleaseReadGuideTimer_result = Belt_Option.getWithDefault(Belt_Option.map(Js_dict.get(v, "pleaseReadGuideTimer"), extra => Spice.optionFromJson(Spice.floatFromJson, extra)), {
    TAG: "Ok",
    _0: undefined
  });
  let maxSuggestItems_result = Belt_Option.getWithDefault(Belt_Option.map(Js_dict.get(v, "maxSuggestItems"), extra => Spice.optionFromJson(Spice.intFromJson, extra)), {
    TAG: "Ok",
    _0: undefined
  });
  let showMoreHName_result = Belt_Option.getWithDefault(Belt_Option.map(Js_dict.get(v, "showMoreHName"), extra => Spice.optionFromJson(Spice.boolFromJson, extra)), {
    TAG: "Ok",
    _0: undefined
  });
  let hideMapBtn_result = Belt_Option.getWithDefault(Belt_Option.map(Js_dict.get(v, "hideMapBtn"), extra => Spice.optionFromJson(Spice.boolFromJson, extra)), {
    TAG: "Ok",
    _0: undefined
  });
  let hideEngBtn_result = Belt_Option.getWithDefault(Belt_Option.map(Js_dict.get(v, "hideEngBtn"), extra => Spice.optionFromJson(Spice.boolFromJson, extra)), {
    TAG: "Ok",
    _0: undefined
  });
  let alwaysShowEngAddr_result = Belt_Option.getWithDefault(Belt_Option.map(Js_dict.get(v, "alwaysShowEngAddr"), extra => Spice.optionFromJson(Spice.boolFromJson, extra)), {
    TAG: "Ok",
    _0: undefined
  });
  let useBannerLink_result = Belt_Option.getWithDefault(Belt_Option.map(Js_dict.get(v, "useBannerLink"), extra => Spice.optionFromJson(Spice.boolFromJson, extra)), {
    TAG: "Ok",
    _0: undefined
  });
  let submitMode_result = Belt_Option.getWithDefault(Belt_Option.map(Js_dict.get(v, "submitMode"), extra => Spice.optionFromJson(Spice.boolFromJson, extra)), {
    TAG: "Ok",
    _0: undefined
  });
  if (width_result.TAG === "Ok") {
    if (height_result.TAG === "Ok") {
      if (animation_result.TAG === "Ok") {
        if (focusInput_result.TAG === "Ok") {
          if (autoMapping_result.TAG === "Ok") {
            if (shorthand_result.TAG === "Ok") {
              if (pleaseReadGuide_result.TAG === "Ok") {
                if (pleaseReadGuideTimer_result.TAG === "Ok") {
                  if (maxSuggestItems_result.TAG === "Ok") {
                    if (showMoreHName_result.TAG === "Ok") {
                      if (hideMapBtn_result.TAG === "Ok") {
                        if (hideEngBtn_result.TAG === "Ok") {
                          if (alwaysShowEngAddr_result.TAG === "Ok") {
                            if (useBannerLink_result.TAG === "Ok") {
                              if (submitMode_result.TAG === "Ok") {
                                return {
                                  TAG: "Ok",
                                  _0: {
                                    width: width_result._0,
                                    height: height_result._0,
                                    animation: animation_result._0,
                                    focusInput: focusInput_result._0,
                                    autoMapping: autoMapping_result._0,
                                    shorthand: shorthand_result._0,
                                    pleaseReadGuide: pleaseReadGuide_result._0,
                                    pleaseReadGuideTimer: pleaseReadGuideTimer_result._0,
                                    maxSuggestItems: maxSuggestItems_result._0,
                                    showMoreHName: showMoreHName_result._0,
                                    hideMapBtn: hideMapBtn_result._0,
                                    hideEngBtn: hideEngBtn_result._0,
                                    alwaysShowEngAddr: alwaysShowEngAddr_result._0,
                                    useBannerLink: useBannerLink_result._0,
                                    submitMode: submitMode_result._0
                                  }
                                };
                              }
                              let e = submitMode_result._0;
                              return Spice.error("submitMode", e.message, e.value);
                            }
                            let e$1 = useBannerLink_result._0;
                            return Spice.error("useBannerLink", e$1.message, e$1.value);
                          }
                          let e$2 = alwaysShowEngAddr_result._0;
                          return Spice.error("alwaysShowEngAddr", e$2.message, e$2.value);
                        }
                        let e$3 = hideEngBtn_result._0;
                        return Spice.error("hideEngBtn", e$3.message, e$3.value);
                      }
                      let e$4 = hideMapBtn_result._0;
                      return Spice.error("hideMapBtn", e$4.message, e$4.value);
                    }
                    let e$5 = showMoreHName_result._0;
                    return Spice.error("showMoreHName", e$5.message, e$5.value);
                  }
                  let e$6 = maxSuggestItems_result._0;
                  return Spice.error("maxSuggestItems", e$6.message, e$6.value);
                }
                let e$7 = pleaseReadGuideTimer_result._0;
                return Spice.error("pleaseReadGuideTimer", e$7.message, e$7.value);
              }
              let e$8 = pleaseReadGuide_result._0;
              return Spice.error("pleaseReadGuide", e$8.message, e$8.value);
            }
            let e$9 = shorthand_result._0;
            return Spice.error("shorthand", e$9.message, e$9.value);
          }
          let e$10 = autoMapping_result._0;
          return Spice.error("autoMapping", e$10.message, e$10.value);
        }
        let e$11 = focusInput_result._0;
        return Spice.error("focusInput", e$11.message, e$11.value);
      }
      let e$12 = animation_result._0;
      return Spice.error("animation", e$12.message, e$12.value);
    }
    let e$13 = height_result._0;
    return Spice.error("height", e$13.message, e$13.value);
  }
  let e$14 = width_result._0;
  return Spice.error("width", e$14.message, e$14.value);
}

export {
  params_encode,
  params_decode,
}
/* No side effect */
