// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Spice from "./Spice.mjs";
import * as Js_dict from "rescript/lib/es6/Js_dict.js";
import * as Belt_Option from "rescript/lib/es6/Belt_Option.js";

function t_encode(v) {
  return Js_dict.fromArray(Spice.filterOptional([
    [
      "spice-label",
      Spice.stringToJson(v.label)
    ],
    [
      "spice-value",
      Spice.intToJson(v.value)
    ]
  ]));
}

function t_decode(v) {
  if (!Array.isArray(v) && (v === null || typeof v !== "object") && typeof v !== "number" && typeof v !== "string" && typeof v !== "boolean") {
    return Spice.error(undefined, "Not an object", v);
  }
  if (!(typeof v === "object" && !Array.isArray(v))) {
    return Spice.error(undefined, "Not an object", v);
  }
  let match = Belt_Option.map(Js_dict.get(v, "spice-label"), Spice.stringFromJson);
  if (match === undefined) {
    return Spice.error(undefined, "spice-label" + " missing", v);
  }
  if (match.TAG === "Ok") {
    let match$1 = Belt_Option.map(Js_dict.get(v, "spice-value"), Spice.intFromJson);
    if (match$1 === undefined) {
      return Spice.error(undefined, "spice-value" + " missing", v);
    }
    if (match$1.TAG === "Ok") {
      return {
        TAG: "Ok",
        _0: {
          label: match._0,
          value: match$1._0
        }
      };
    }
    let e = match$1._0;
    return {
      TAG: "Error",
      _0: {
        path: "." + ("spice-value" + e.path),
        message: e.message,
        value: e.value
      }
    };
  }
  let e$1 = match._0;
  return {
    TAG: "Error",
    _0: {
      path: "." + ("spice-label" + e$1.path),
      message: e$1.message,
      value: e$1.value
    }
  };
}

function t1_encode(v) {
  return Js_dict.fromArray(Spice.filterOptional([
    [
      "label",
      Spice.stringToJson(v.label)
    ],
    [
      "value",
      Spice.intToJson(v.value)
    ]
  ]));
}

function t1_decode(v) {
  if (!Array.isArray(v) && (v === null || typeof v !== "object") && typeof v !== "number" && typeof v !== "string" && typeof v !== "boolean") {
    return Spice.error(undefined, "Not an object", v);
  }
  if (!(typeof v === "object" && !Array.isArray(v))) {
    return Spice.error(undefined, "Not an object", v);
  }
  let match = Belt_Option.map(Js_dict.get(v, "label"), Spice.stringFromJson);
  if (match === undefined) {
    return Spice.error(undefined, "label" + " missing", v);
  }
  if (match.TAG === "Ok") {
    let match$1 = Belt_Option.map(Js_dict.get(v, "value"), Spice.intFromJson);
    if (match$1 === undefined) {
      return Spice.error(undefined, "value" + " missing", v);
    }
    if (match$1.TAG === "Ok") {
      return {
        TAG: "Ok",
        _0: {
          label: match._0,
          value: match$1._0
        }
      };
    }
    let e = match$1._0;
    return {
      TAG: "Error",
      _0: {
        path: "." + ("value" + e.path),
        message: e.message,
        value: e.value
      }
    };
  }
  let e$1 = match._0;
  return {
    TAG: "Error",
    _0: {
      path: "." + ("label" + e$1.path),
      message: e$1.message,
      value: e$1.value
    }
  };
}

function tOp_encode(v) {
  let extra = v.label;
  let extra$1 = v.value;
  return Js_dict.fromArray(Spice.filterOptional([
    [
      "label",
      Spice.optionToJson(Spice.stringToJson, extra)
    ],
    [
      "value",
      Spice.optionToJson(Spice.intToJson, extra$1)
    ]
  ]));
}

function tOp_decode(v) {
  if (!Array.isArray(v) && (v === null || typeof v !== "object") && typeof v !== "number" && typeof v !== "string" && typeof v !== "boolean") {
    return Spice.error(undefined, "Not an object", v);
  }
  if (!(typeof v === "object" && !Array.isArray(v))) {
    return Spice.error(undefined, "Not an object", v);
  }
  let match = Belt_Option.map(Js_dict.get(v, "label"), extra => Spice.optionFromJson(Spice.stringFromJson, extra));
  if (match !== undefined) {
    if (match.TAG === "Ok") {
      let label = match._0;
      let match$1 = Belt_Option.map(Js_dict.get(v, "value"), extra => Spice.optionFromJson(Spice.intFromJson, extra));
      if (match$1 === undefined) {
        return {
          TAG: "Ok",
          _0: {
            label: label
          }
        };
      }
      if (match$1.TAG === "Ok") {
        return {
          TAG: "Ok",
          _0: {
            label: label,
            value: match$1._0
          }
        };
      }
      let e = match$1._0;
      return {
        TAG: "Error",
        _0: {
          path: "." + ("value" + e.path),
          message: e.message,
          value: e.value
        }
      };
    }
    let e$1 = match._0;
    return {
      TAG: "Error",
      _0: {
        path: "." + ("label" + e$1.path),
        message: e$1.message,
        value: e$1.value
      }
    };
  }
  let match$2 = Belt_Option.map(Js_dict.get(v, "value"), extra => Spice.optionFromJson(Spice.intFromJson, extra));
  if (match$2 === undefined) {
    return {
      TAG: "Ok",
      _0: {}
    };
  }
  if (match$2.TAG === "Ok") {
    return {
      TAG: "Ok",
      _0: {
        value: match$2._0
      }
    };
  }
  let e$2 = match$2._0;
  return {
    TAG: "Error",
    _0: {
      path: "." + ("value" + e$2.path),
      message: e$2.message,
      value: e$2.value
    }
  };
}

function t2_encode(v) {
  let extra = v.o;
  let extra$1 = v.n;
  let extra$2 = v.on;
  let extra$3 = v.n2;
  return Js_dict.fromArray(Spice.filterOptional([
    [
      "o",
      Spice.optionToJson(Spice.stringToJson, extra)
    ],
    [
      "n",
      Spice.nullToJson(Spice.stringToJson, extra$1)
    ],
    [
      "on",
      Spice.optionToJson(extra => Spice.nullToJson(Spice.stringToJson, extra), extra$2)
    ],
    [
      "n2",
      Spice.nullToJson(Spice.stringToJson, extra$3)
    ]
  ]));
}

function t2_decode(v) {
  if (!Array.isArray(v) && (v === null || typeof v !== "object") && typeof v !== "number" && typeof v !== "string" && typeof v !== "boolean") {
    return Spice.error(undefined, "Not an object", v);
  }
  if (!(typeof v === "object" && !Array.isArray(v))) {
    return Spice.error(undefined, "Not an object", v);
  }
  let match = Belt_Option.map(Js_dict.get(v, "o"), extra => Spice.optionFromJson(Spice.stringFromJson, extra));
  if (match !== undefined) {
    if (match.TAG === "Ok") {
      let o = match._0;
      let match$1 = Belt_Option.map(Js_dict.get(v, "n"), extra => Spice.nullFromJson(Spice.stringFromJson, extra));
      if (match$1 === undefined) {
        return Spice.error(undefined, "n" + " missing", v);
      }
      if (match$1.TAG === "Ok") {
        let n = match$1._0;
        let match$2 = Belt_Option.map(Js_dict.get(v, "on"), extra => Spice.optionFromJson(extra => Spice.nullFromJson(Spice.stringFromJson, extra), extra));
        if (match$2 !== undefined) {
          if (match$2.TAG === "Ok") {
            let match$3 = Belt_Option.map(Js_dict.get(v, "n2"), extra => Spice.nullFromJson(Spice.stringFromJson, extra));
            if (match$3 === undefined) {
              return Spice.error(undefined, "n2" + " missing", v);
            }
            if (match$3.TAG === "Ok") {
              return {
                TAG: "Ok",
                _0: {
                  o: o,
                  n: n,
                  on: match$2._0,
                  n2: match$3._0
                }
              };
            }
            let e = match$3._0;
            return {
              TAG: "Error",
              _0: {
                path: "." + ("n2" + e.path),
                message: e.message,
                value: e.value
              }
            };
          }
          let e$1 = match$2._0;
          return {
            TAG: "Error",
            _0: {
              path: "." + ("on" + e$1.path),
              message: e$1.message,
              value: e$1.value
            }
          };
        }
        let match$4 = Belt_Option.map(Js_dict.get(v, "n2"), extra => Spice.nullFromJson(Spice.stringFromJson, extra));
        if (match$4 === undefined) {
          return Spice.error(undefined, "n2" + " missing", v);
        }
        if (match$4.TAG === "Ok") {
          return {
            TAG: "Ok",
            _0: {
              o: o,
              n: n,
              n2: match$4._0
            }
          };
        }
        let e$2 = match$4._0;
        return {
          TAG: "Error",
          _0: {
            path: "." + ("n2" + e$2.path),
            message: e$2.message,
            value: e$2.value
          }
        };
      }
      let e$3 = match$1._0;
      return {
        TAG: "Error",
        _0: {
          path: "." + ("n" + e$3.path),
          message: e$3.message,
          value: e$3.value
        }
      };
    }
    let e$4 = match._0;
    return {
      TAG: "Error",
      _0: {
        path: "." + ("o" + e$4.path),
        message: e$4.message,
        value: e$4.value
      }
    };
  }
  let match$5 = Belt_Option.map(Js_dict.get(v, "n"), extra => Spice.nullFromJson(Spice.stringFromJson, extra));
  if (match$5 === undefined) {
    return Spice.error(undefined, "n" + " missing", v);
  }
  if (match$5.TAG === "Ok") {
    let n$1 = match$5._0;
    let match$6 = Belt_Option.map(Js_dict.get(v, "on"), extra => Spice.optionFromJson(extra => Spice.nullFromJson(Spice.stringFromJson, extra), extra));
    if (match$6 !== undefined) {
      if (match$6.TAG === "Ok") {
        let match$7 = Belt_Option.map(Js_dict.get(v, "n2"), extra => Spice.nullFromJson(Spice.stringFromJson, extra));
        if (match$7 === undefined) {
          return Spice.error(undefined, "n2" + " missing", v);
        }
        if (match$7.TAG === "Ok") {
          return {
            TAG: "Ok",
            _0: {
              n: n$1,
              on: match$6._0,
              n2: match$7._0
            }
          };
        }
        let e$5 = match$7._0;
        return {
          TAG: "Error",
          _0: {
            path: "." + ("n2" + e$5.path),
            message: e$5.message,
            value: e$5.value
          }
        };
      }
      let e$6 = match$6._0;
      return {
        TAG: "Error",
        _0: {
          path: "." + ("on" + e$6.path),
          message: e$6.message,
          value: e$6.value
        }
      };
    }
    let match$8 = Belt_Option.map(Js_dict.get(v, "n2"), extra => Spice.nullFromJson(Spice.stringFromJson, extra));
    if (match$8 === undefined) {
      return Spice.error(undefined, "n2" + " missing", v);
    }
    if (match$8.TAG === "Ok") {
      return {
        TAG: "Ok",
        _0: {
          n: n$1,
          n2: match$8._0
        }
      };
    }
    let e$7 = match$8._0;
    return {
      TAG: "Error",
      _0: {
        path: "." + ("n2" + e$7.path),
        message: e$7.message,
        value: e$7.value
      }
    };
  }
  let e$8 = match$5._0;
  return {
    TAG: "Error",
    _0: {
      path: "." + ("n" + e$8.path),
      message: e$8.message,
      value: e$8.value
    }
  };
}

function t3_encode(v) {
  let extra = v.value2;
  return Js_dict.fromArray(Spice.filterOptional([
    [
      "value",
      Spice.intToJson(v.value)
    ],
    [
      "value2",
      Spice.optionToJson(Spice.intToJson, extra)
    ]
  ]));
}

function t3_decode(v) {
  if (!Array.isArray(v) && (v === null || typeof v !== "object") && typeof v !== "number" && typeof v !== "string" && typeof v !== "boolean") {
    return Spice.error(undefined, "Not an object", v);
  }
  if (!(typeof v === "object" && !Array.isArray(v))) {
    return Spice.error(undefined, "Not an object", v);
  }
  let match = Belt_Option.getWithDefault(Belt_Option.map(Js_dict.get(v, "value"), Spice.intFromJson), {
    TAG: "Ok",
    _0: 0
  });
  if (match.TAG === "Ok") {
    let match$1 = Belt_Option.getWithDefault(Belt_Option.map(Js_dict.get(v, "value2"), extra => Spice.optionFromJson(Spice.intFromJson, extra)), {
      TAG: "Ok",
      _0: 1
    });
    if (match$1.TAG === "Ok") {
      return {
        TAG: "Ok",
        _0: {
          value: match._0,
          value2: match$1._0
        }
      };
    }
    let e = match$1._0;
    return {
      TAG: "Error",
      _0: {
        path: "." + ("value2" + e.path),
        message: e.message,
        value: e.value
      }
    };
  }
  let e$1 = match._0;
  return {
    TAG: "Error",
    _0: {
      path: "." + ("value" + e$1.path),
      message: e$1.message,
      value: e$1.value
    }
  };
}

function t4_encode(v) {
  let extra = v.b;
  let extra$1 = v.c;
  return Js_dict.fromArray(Spice.filterOptional([
    [
      "a",
      Spice.bigintToJson(v.a)
    ],
    [
      "b",
      Spice.optionToJson(Spice.bigintToJson, extra)
    ],
    [
      "c",
      Spice.optionToJson(Spice.bigintToJson, extra$1)
    ]
  ]));
}

function t4_decode(v) {
  if (!Array.isArray(v) && (v === null || typeof v !== "object") && typeof v !== "number" && typeof v !== "string" && typeof v !== "boolean") {
    return Spice.error(undefined, "Not an object", v);
  }
  if (!(typeof v === "object" && !Array.isArray(v))) {
    return Spice.error(undefined, "Not an object", v);
  }
  let match = Belt_Option.map(Js_dict.get(v, "a"), Spice.bigintFromJson);
  if (match === undefined) {
    return Spice.error(undefined, "a" + " missing", v);
  }
  if (match.TAG === "Ok") {
    let a = match._0;
    let match$1 = Belt_Option.map(Js_dict.get(v, "b"), extra => Spice.optionFromJson(Spice.bigintFromJson, extra));
    if (match$1 !== undefined) {
      if (match$1.TAG === "Ok") {
        let b = match$1._0;
        let match$2 = Belt_Option.map(Js_dict.get(v, "c"), extra => Spice.optionFromJson(Spice.bigintFromJson, extra));
        if (match$2 === undefined) {
          return {
            TAG: "Ok",
            _0: {
              a: a,
              b: b
            }
          };
        }
        if (match$2.TAG === "Ok") {
          return {
            TAG: "Ok",
            _0: {
              a: a,
              b: b,
              c: match$2._0
            }
          };
        }
        let e = match$2._0;
        return {
          TAG: "Error",
          _0: {
            path: "." + ("c" + e.path),
            message: e.message,
            value: e.value
          }
        };
      }
      let e$1 = match$1._0;
      return {
        TAG: "Error",
        _0: {
          path: "." + ("b" + e$1.path),
          message: e$1.message,
          value: e$1.value
        }
      };
    }
    let match$3 = Belt_Option.map(Js_dict.get(v, "c"), extra => Spice.optionFromJson(Spice.bigintFromJson, extra));
    if (match$3 === undefined) {
      return {
        TAG: "Ok",
        _0: {
          a: a
        }
      };
    }
    if (match$3.TAG === "Ok") {
      return {
        TAG: "Ok",
        _0: {
          a: a,
          c: match$3._0
        }
      };
    }
    let e$2 = match$3._0;
    return {
      TAG: "Error",
      _0: {
        path: "." + ("c" + e$2.path),
        message: e$2.message,
        value: e$2.value
      }
    };
  }
  let e$3 = match._0;
  return {
    TAG: "Error",
    _0: {
      path: "." + ("a" + e$3.path),
      message: e$3.message,
      value: e$3.value
    }
  };
}

export {
  t_encode,
  t_decode,
  t1_encode,
  t1_decode,
  tOp_encode,
  tOp_decode,
  t2_encode,
  t2_decode,
  t3_encode,
  t3_decode,
  t4_encode,
  t4_decode,
}
/* No side effect */
