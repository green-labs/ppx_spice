// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Spice from "./Spice.mjs";
import * as Js_dict from "rescript/lib/es6/Js_dict.js";
import * as Belt_Option from "rescript/lib/es6/Belt_Option.js";

function t_encode(v) {
  return Js_dict.fromArray(Spice.filterOptional([
    [
      "spice-label",
      Spice.stringToJson(v.label)
    ],
    [
      "spice-value",
      Spice.intToJson(v.value)
    ]
  ]));
}

function t_decode(v) {
  if (!Array.isArray(v) && (v === null || typeof v !== "object") && typeof v !== "number" && typeof v !== "string" && typeof v !== "boolean") {
    return Spice.error(undefined, "Not an object", v);
  }
  if (!(typeof v === "object" && !Array.isArray(v))) {
    return Spice.error(undefined, "Not an object", v);
  }
  let label_result = Belt_Option.getWithDefault(Belt_Option.map(Js_dict.get(v, "spice-label"), Spice.stringFromJson), Spice.error(undefined, "spice-label" + " missing", v));
  let value_result = Belt_Option.getWithDefault(Belt_Option.map(Js_dict.get(v, "spice-value"), Spice.intFromJson), Spice.error(undefined, "spice-value" + " missing", v));
  if (label_result.TAG === "Ok") {
    if (value_result.TAG === "Ok") {
      return {
        TAG: "Ok",
        _0: {
          label: label_result._0,
          value: value_result._0
        }
      };
    }
    let e = value_result._0;
    return Spice.error("spice-value", e.message, e.value);
  }
  let e$1 = label_result._0;
  return Spice.error("spice-label", e$1.message, e$1.value);
}

function t1_encode(v) {
  return Js_dict.fromArray(Spice.filterOptional([
    [
      "label",
      Spice.stringToJson(v.label)
    ],
    [
      "value",
      Spice.intToJson(v.value)
    ]
  ]));
}

function t1_decode(v) {
  if (!Array.isArray(v) && (v === null || typeof v !== "object") && typeof v !== "number" && typeof v !== "string" && typeof v !== "boolean") {
    return Spice.error(undefined, "Not an object", v);
  }
  if (!(typeof v === "object" && !Array.isArray(v))) {
    return Spice.error(undefined, "Not an object", v);
  }
  let label_result = Belt_Option.getWithDefault(Belt_Option.map(Js_dict.get(v, "label"), Spice.stringFromJson), Spice.error(undefined, "label" + " missing", v));
  let value_result = Belt_Option.getWithDefault(Belt_Option.map(Js_dict.get(v, "value"), Spice.intFromJson), Spice.error(undefined, "value" + " missing", v));
  if (label_result.TAG === "Ok") {
    if (value_result.TAG === "Ok") {
      return {
        TAG: "Ok",
        _0: {
          label: label_result._0,
          value: value_result._0
        }
      };
    }
    let e = value_result._0;
    return Spice.error("value", e.message, e.value);
  }
  let e$1 = label_result._0;
  return Spice.error("label", e$1.message, e$1.value);
}

function tOp_encode(v) {
  let extra = v.label;
  let extra$1 = v.value;
  return Js_dict.fromArray(Spice.filterOptional([
    [
      "label",
      Spice.optionToJson(Spice.stringToJson, extra)
    ],
    [
      "value",
      Spice.optionToJson(Spice.intToJson, extra$1)
    ]
  ]));
}

function tOp_decode(v) {
  if (!Array.isArray(v) && (v === null || typeof v !== "object") && typeof v !== "number" && typeof v !== "string" && typeof v !== "boolean") {
    return Spice.error(undefined, "Not an object", v);
  }
  if (!(typeof v === "object" && !Array.isArray(v))) {
    return Spice.error(undefined, "Not an object", v);
  }
  let label_result = Belt_Option.getWithDefault(Belt_Option.map(Js_dict.get(v, "label"), extra => Spice.optionFromJson(Spice.stringFromJson, extra)), {
    TAG: "Ok",
    _0: undefined
  });
  let value_result = Belt_Option.getWithDefault(Belt_Option.map(Js_dict.get(v, "value"), extra => Spice.optionFromJson(Spice.intFromJson, extra)), {
    TAG: "Ok",
    _0: undefined
  });
  if (label_result.TAG === "Ok") {
    let label = label_result._0;
    if (label !== undefined) {
      if (value_result.TAG === "Ok") {
        let value = value_result._0;
        if (value !== undefined) {
          return {
            TAG: "Ok",
            _0: {
              label: label,
              value: value
            }
          };
        } else {
          return {
            TAG: "Ok",
            _0: {
              label: label
            }
          };
        }
      }
      
    } else if (value_result.TAG === "Ok") {
      let value$1 = value_result._0;
      if (value$1 !== undefined) {
        return {
          TAG: "Ok",
          _0: {
            value: value$1
          }
        };
      } else {
        return {
          TAG: "Ok",
          _0: {}
        };
      }
    }
    
  } else {
    let e = label_result._0;
    return Spice.error("label", e.message, e.value);
  }
  let e$1 = value_result._0;
  return Spice.error("value", e$1.message, e$1.value);
}

function t2_encode(v) {
  let extra = v.o;
  let extra$1 = v.n;
  let extra$2 = v.on;
  let extra$3 = v.n2;
  return Js_dict.fromArray(Spice.filterOptional([
    [
      "o",
      Spice.optionToJson(Spice.stringToJson, extra)
    ],
    [
      "n",
      Spice.nullToJson(Spice.stringToJson, extra$1)
    ],
    [
      "on",
      Spice.optionToJson(extra => Spice.nullToJson(Spice.stringToJson, extra), extra$2)
    ],
    [
      "n2",
      Spice.nullToJson(Spice.stringToJson, extra$3)
    ]
  ]));
}

function t2_decode(v) {
  if (!Array.isArray(v) && (v === null || typeof v !== "object") && typeof v !== "number" && typeof v !== "string" && typeof v !== "boolean") {
    return Spice.error(undefined, "Not an object", v);
  }
  if (!(typeof v === "object" && !Array.isArray(v))) {
    return Spice.error(undefined, "Not an object", v);
  }
  let o_result = Belt_Option.getWithDefault(Belt_Option.map(Js_dict.get(v, "o"), extra => Spice.optionFromJson(Spice.stringFromJson, extra)), {
    TAG: "Ok",
    _0: undefined
  });
  let n_result = Belt_Option.getWithDefault(Belt_Option.map(Js_dict.get(v, "n"), extra => Spice.nullFromJson(Spice.stringFromJson, extra)), Spice.error(undefined, "n" + " missing", v));
  let on_result = Belt_Option.getWithDefault(Belt_Option.map(Js_dict.get(v, "on"), extra => Spice.optionFromJson(extra => Spice.nullFromJson(Spice.stringFromJson, extra), extra)), {
    TAG: "Ok",
    _0: undefined
  });
  let n2_result = Belt_Option.getWithDefault(Belt_Option.map(Js_dict.get(v, "n2"), extra => Spice.nullFromJson(Spice.stringFromJson, extra)), Spice.error(undefined, "n2" + " missing", v));
  let exit = 0;
  if (o_result.TAG === "Ok") {
    let o = o_result._0;
    if (o !== undefined) {
      if (n_result.TAG === "Ok") {
        let n = n_result._0;
        if (on_result.TAG === "Ok") {
          let on = on_result._0;
          if (on !== undefined) {
            if (n2_result.TAG === "Ok") {
              return {
                TAG: "Ok",
                _0: {
                  o: o,
                  n: n,
                  on: on,
                  n2: n2_result._0
                }
              };
            }
            exit = 3;
          } else {
            if (n2_result.TAG === "Ok") {
              return {
                TAG: "Ok",
                _0: {
                  o: o,
                  n: n,
                  n2: n2_result._0
                }
              };
            }
            exit = 3;
          }
        } else {
          exit = 2;
        }
      } else {
        exit = 1;
      }
    } else if (n_result.TAG === "Ok") {
      let n$1 = n_result._0;
      if (on_result.TAG === "Ok") {
        let on$1 = on_result._0;
        if (on$1 !== undefined) {
          if (n2_result.TAG === "Ok") {
            return {
              TAG: "Ok",
              _0: {
                n: n$1,
                on: on$1,
                n2: n2_result._0
              }
            };
          }
          exit = 3;
        } else {
          if (n2_result.TAG === "Ok") {
            return {
              TAG: "Ok",
              _0: {
                n: n$1,
                n2: n2_result._0
              }
            };
          }
          exit = 3;
        }
      } else {
        exit = 2;
      }
    } else {
      exit = 1;
    }
  } else {
    let e = o_result._0;
    return Spice.error("o", e.message, e.value);
  }
  switch (exit) {
    case 1 :
      let e$1 = n_result._0;
      return Spice.error("n", e$1.message, e$1.value);
    case 2 :
      let e$2 = on_result._0;
      return Spice.error("on", e$2.message, e$2.value);
    case 3 :
      let e$3 = n2_result._0;
      return Spice.error("n2", e$3.message, e$3.value);
  }
}

function t3_encode(v) {
  let extra = v.value2;
  return Js_dict.fromArray(Spice.filterOptional([
    [
      "value",
      Spice.intToJson(v.value)
    ],
    [
      "value2",
      Spice.optionToJson(Spice.intToJson, extra)
    ]
  ]));
}

function t3_decode(v) {
  if (!Array.isArray(v) && (v === null || typeof v !== "object") && typeof v !== "number" && typeof v !== "string" && typeof v !== "boolean") {
    return Spice.error(undefined, "Not an object", v);
  }
  if (!(typeof v === "object" && !Array.isArray(v))) {
    return Spice.error(undefined, "Not an object", v);
  }
  let value_result = Belt_Option.getWithDefault(Belt_Option.map(Js_dict.get(v, "value"), Spice.intFromJson), {
    TAG: "Ok",
    _0: 0
  });
  let value2_result = Belt_Option.getWithDefault(Belt_Option.map(Js_dict.get(v, "value2"), extra => Spice.optionFromJson(Spice.intFromJson, extra)), {
    TAG: "Ok",
    _0: 1
  });
  if (value_result.TAG === "Ok") {
    let value = value_result._0;
    if (value2_result.TAG === "Ok") {
      let value2 = value2_result._0;
      if (value2 !== undefined) {
        return {
          TAG: "Ok",
          _0: {
            value: value,
            value2: value2
          }
        };
      } else {
        return {
          TAG: "Ok",
          _0: {
            value: value
          }
        };
      }
    }
    let e = value2_result._0;
    return Spice.error("value2", e.message, e.value);
  }
  let e$1 = value_result._0;
  return Spice.error("value", e$1.message, e$1.value);
}

function t4_encode(v) {
  let extra = v.b;
  let extra$1 = v.c;
  return Js_dict.fromArray(Spice.filterOptional([
    [
      "a",
      Spice.bigintToJson(v.a)
    ],
    [
      "b",
      Spice.optionToJson(Spice.bigintToJson, extra)
    ],
    [
      "c",
      Spice.optionToJson(Spice.bigintToJson, extra$1)
    ]
  ]));
}

function t4_decode(v) {
  if (!Array.isArray(v) && (v === null || typeof v !== "object") && typeof v !== "number" && typeof v !== "string" && typeof v !== "boolean") {
    return Spice.error(undefined, "Not an object", v);
  }
  if (!(typeof v === "object" && !Array.isArray(v))) {
    return Spice.error(undefined, "Not an object", v);
  }
  let a_result = Belt_Option.getWithDefault(Belt_Option.map(Js_dict.get(v, "a"), Spice.bigintFromJson), Spice.error(undefined, "a" + " missing", v));
  let b_result = Belt_Option.getWithDefault(Belt_Option.map(Js_dict.get(v, "b"), extra => Spice.optionFromJson(Spice.bigintFromJson, extra)), {
    TAG: "Ok",
    _0: undefined
  });
  let c_result = Belt_Option.getWithDefault(Belt_Option.map(Js_dict.get(v, "c"), extra => Spice.optionFromJson(Spice.bigintFromJson, extra)), {
    TAG: "Ok",
    _0: undefined
  });
  if (a_result.TAG === "Ok") {
    let a = a_result._0;
    if (b_result.TAG === "Ok") {
      let b = b_result._0;
      if (b !== undefined) {
        if (c_result.TAG === "Ok") {
          let c = c_result._0;
          if (c !== undefined) {
            return {
              TAG: "Ok",
              _0: {
                a: a,
                b: b,
                c: c
              }
            };
          } else {
            return {
              TAG: "Ok",
              _0: {
                a: a,
                b: b
              }
            };
          }
        }
        
      } else if (c_result.TAG === "Ok") {
        let c$1 = c_result._0;
        if (c$1 !== undefined) {
          return {
            TAG: "Ok",
            _0: {
              a: a,
              c: c$1
            }
          };
        } else {
          return {
            TAG: "Ok",
            _0: {
              a: a
            }
          };
        }
      }
      
    } else {
      let e = b_result._0;
      return Spice.error("b", e.message, e.value);
    }
  } else {
    let e$1 = a_result._0;
    return Spice.error("a", e$1.message, e$1.value);
  }
  let e$2 = c_result._0;
  return Spice.error("c", e$2.message, e$2.value);
}

export {
  t_encode,
  t_decode,
  t1_encode,
  t1_decode,
  tOp_encode,
  tOp_decode,
  t2_encode,
  t2_decode,
  t3_encode,
  t3_decode,
  t4_encode,
  t4_decode,
}
/* No side effect */
