// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Spice = require("./Spice.js");
var Belt_Array = require("rescript/lib/js/belt_Array.js");
var Belt_Result = require("rescript/lib/js/belt_Result.js");

function t_encode(v) {
  if (v === "One") {
    return "하나";
  } else {
    return "둘";
  }
}

function t_decode(v) {
  if (!Array.isArray(v) && (v === null || typeof v !== "object") && typeof v !== "number" && typeof v !== "string" && typeof v !== "boolean" || typeof v !== "string") {
    return Spice.error(undefined, "Not a JSONString", v);
  } else if ("하나" === v) {
    return {
            TAG: "Ok",
            _0: "One"
          };
  } else if ("둘" === v) {
    return {
            TAG: "Ok",
            _0: "Two"
          };
  } else {
    return Spice.error(undefined, "Not matched", v);
  }
}

function t1_encode(v) {
  if (v === "One1") {
    return ["One1"];
  } else {
    return ["Two1"];
  }
}

function t1_decode(v) {
  if (!Array.isArray(v) && (v === null || typeof v !== "object") && typeof v !== "number" && typeof v !== "string" && typeof v !== "boolean") {
    return Spice.error(undefined, "Not a variant", v);
  }
  if (!Array.isArray(v)) {
    return Spice.error(undefined, "Not a variant", v);
  }
  if (v.length === 0) {
    return Spice.error(undefined, "Expected variant, found empty array", v);
  }
  var match = Belt_Array.getExn(v, 0);
  if (!(!Array.isArray(match) && (match === null || typeof match !== "object") && typeof match !== "number" && typeof match !== "string" && typeof match !== "boolean") && typeof match === "string") {
    switch (match) {
      case "One1" :
          if (v.length !== 1) {
            return Spice.error(undefined, "Invalid number of arguments to variant constructor", v);
          } else {
            return {
                    TAG: "Ok",
                    _0: "One1"
                  };
          }
      case "Two1" :
          if (v.length !== 1) {
            return Spice.error(undefined, "Invalid number of arguments to variant constructor", v);
          } else {
            return {
                    TAG: "Ok",
                    _0: "Two1"
                  };
          }
      default:
        
    }
  }
  return Spice.error(undefined, "Invalid variant constructor", Belt_Array.getExn(v, 0));
}

function t2_encode(v) {
  return Spice.intToJson(v);
}

function t2_decode(v) {
  return Belt_Result.map(Spice.intFromJson(v), (function (v) {
                return v;
              }));
}

function t3_encode(v) {
  return Spice.intToJson(v);
}

function t3_decode(v) {
  return Belt_Result.map(Spice.intFromJson(v), (function (v) {
                return v;
              }));
}

exports.t_encode = t_encode;
exports.t_decode = t_decode;
exports.t1_encode = t1_encode;
exports.t1_decode = t1_decode;
exports.t2_encode = t2_encode;
exports.t2_decode = t2_decode;
exports.t3_encode = t3_encode;
exports.t3_decode = t3_decode;
/* No side effect */
