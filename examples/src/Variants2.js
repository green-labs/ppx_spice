// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Spice = require("@greenlabs/ppx-spice/src/rescript/Spice.js");
var Js_dict = require("rescript/lib/js/js_dict.js");
var Belt_Array = require("rescript/lib/js/belt_Array.js");
var Belt_Option = require("rescript/lib/js/belt_Option.js");
var Belt_Result = require("rescript/lib/js/belt_Result.js");

function language_encode(v) {
  if (typeof v === "object") {
    return [
            "ReScript",
            Spice.stringToJson(v._0)
          ];
  }
  switch (v) {
    case "OCaml" :
        return ["OCaml"];
    case "TypeScript" :
        return ["TypeScript"];
    case "JavaScript" :
        return ["JavaScript"];
    
  }
}

function language_decode(v) {
  if (!Array.isArray(v) && (v === null || typeof v !== "object") && typeof v !== "number" && typeof v !== "string" && typeof v !== "boolean") {
    return Spice.error(undefined, "Not a variant", v);
  }
  if (!Array.isArray(v)) {
    return Spice.error(undefined, "Not a variant", v);
  }
  if (v.length === 0) {
    return Spice.error(undefined, "Expected variant, found empty array", v);
  }
  var match = Belt_Array.getExn(v, 0);
  if (!(!Array.isArray(match) && (match === null || typeof match !== "object") && typeof match !== "number" && typeof match !== "string" && typeof match !== "boolean") && typeof match === "string") {
    switch (match) {
      case "JavaScript" :
          if (v.length !== 1) {
            return Spice.error(undefined, "Invalid number of arguments to variant constructor", v);
          } else {
            return {
                    TAG: "Ok",
                    _0: "JavaScript"
                  };
          }
      case "OCaml" :
          if (v.length !== 1) {
            return Spice.error(undefined, "Invalid number of arguments to variant constructor", v);
          } else {
            return {
                    TAG: "Ok",
                    _0: "OCaml"
                  };
          }
      case "ReScript" :
          if (v.length !== 2) {
            return Spice.error(undefined, "Invalid number of arguments to variant constructor", v);
          }
          var v0 = Spice.stringFromJson(Belt_Array.getExn(v, 1));
          if (v0.TAG === "Ok") {
            return {
                    TAG: "Ok",
                    _0: {
                      TAG: "ReScript",
                      _0: v0._0
                    }
                  };
          }
          var e = v0._0;
          return {
                  TAG: "Error",
                  _0: {
                    path: "[0]" + e.path,
                    message: e.message,
                    value: e.value
                  }
                };
      case "TypeScript" :
          if (v.length !== 1) {
            return Spice.error(undefined, "Invalid number of arguments to variant constructor", v);
          } else {
            return {
                    TAG: "Ok",
                    _0: "TypeScript"
                  };
          }
      default:
        
    }
  }
  return Spice.error(undefined, "Invalid variant constructor", Belt_Array.getExn(v, 0));
}

function user_encode(v) {
  return Js_dict.fromArray(Spice.filterOptional([
                  [
                    "id",
                    false,
                    Spice.intToJson(v.id)
                  ],
                  [
                    "nickname",
                    true,
                    (function (extra) {
                          return Spice.optionToJson(Spice.stringToJson, extra);
                        })(v.nickname)
                  ],
                  [
                    "language",
                    false,
                    language_encode(v.language)
                  ]
                ]));
}

function user_decode(v) {
  if (!Array.isArray(v) && (v === null || typeof v !== "object") && typeof v !== "number" && typeof v !== "string" && typeof v !== "boolean") {
    return Spice.error(undefined, "Not an object", v);
  }
  if (!(typeof v === "object" && !Array.isArray(v))) {
    return Spice.error(undefined, "Not an object", v);
  }
  var id = Spice.intFromJson(Belt_Option.getWithDefault(Js_dict.get(v, "id"), null));
  if (id.TAG === "Ok") {
    var nickname = (function (extra) {
          return Spice.optionFromJson(Spice.stringFromJson, extra);
        })(Belt_Option.getWithDefault(Js_dict.get(v, "nickname"), null));
    if (nickname.TAG === "Ok") {
      var language = language_decode(Belt_Option.getWithDefault(Js_dict.get(v, "language"), null));
      if (language.TAG === "Ok") {
        return {
                TAG: "Ok",
                _0: {
                  id: id._0,
                  nickname: nickname._0,
                  language: language._0
                }
              };
      }
      var e = language._0;
      return {
              TAG: "Error",
              _0: {
                path: ".language" + e.path,
                message: e.message,
                value: e.value
              }
            };
    }
    var e$1 = nickname._0;
    return {
            TAG: "Error",
            _0: {
              path: ".nickname" + e$1.path,
              message: e$1.message,
              value: e$1.value
            }
          };
  }
  var e$2 = id._0;
  return {
          TAG: "Error",
          _0: {
            path: ".id" + e$2.path,
            message: e$2.message,
            value: e$2.value
          }
        };
}

var data = {
    "id": 1,
    "nickname": "bob",
    "language": ["ReScript", "awesome"]
  };

var user = user_decode(data);

var json = user_encode(Belt_Result.getExn(user));

var language = language_decode("ReScript");

exports.language_encode = language_encode;
exports.language_decode = language_decode;
exports.user_encode = user_encode;
exports.user_decode = user_decode;
exports.data = data;
exports.user = user;
exports.json = json;
exports.language = language;
/* user Not a pure module */
