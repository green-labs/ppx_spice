// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Spice = require("@greenlabs/ppx-spice/src/rescript/Spice.js");
var Js_dict = require("rescript/lib/js/js_dict.js");
var Js_json = require("rescript/lib/js/js_json.js");
var Belt_Option = require("rescript/lib/js/belt_Option.js");
var Belt_Result = require("rescript/lib/js/belt_Result.js");

function language_encode(v) {
  switch (v) {
    case "ReScript" :
        return "ReScript";
    case "OCaml" :
        return "OCaml";
    case "TypeScript" :
        return "TypeScript";
    case "JavaScript" :
        return "JavaScript";
    
  }
}

function language_decode(v) {
  var str = Js_json.classify(v);
  if (typeof str !== "object") {
    return Spice.error(undefined, "Not a JSONString", v);
  }
  if (str.TAG !== "JSONString") {
    return Spice.error(undefined, "Not a JSONString", v);
  }
  var str$1 = str._0;
  if ("ReScript" === str$1) {
    return {
            TAG: "Ok",
            _0: "ReScript"
          };
  } else if ("OCaml" === str$1) {
    return {
            TAG: "Ok",
            _0: "OCaml"
          };
  } else if ("TypeScript" === str$1) {
    return {
            TAG: "Ok",
            _0: "TypeScript"
          };
  } else if ("JavaScript" === str$1) {
    return {
            TAG: "Ok",
            _0: "JavaScript"
          };
  } else {
    return Spice.error(undefined, "Not matched", v);
  }
}

function user_encode(v) {
  return Js_dict.fromArray(Spice.filterOptional([
                  [
                    "id",
                    false,
                    Spice.intToJson(v.id)
                  ],
                  [
                    "nickname",
                    true,
                    (function (extra) {
                          return Spice.optionToJson(Spice.stringToJson, extra);
                        })(v.nickname)
                  ],
                  [
                    "language",
                    false,
                    language_encode(v.language)
                  ]
                ]));
}

function user_decode(v) {
  var dict = Js_json.classify(v);
  if (typeof dict !== "object") {
    return Spice.error(undefined, "Not an object", v);
  }
  if (dict.TAG !== "JSONObject") {
    return Spice.error(undefined, "Not an object", v);
  }
  var dict$1 = dict._0;
  var id = Spice.intFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "id"), null));
  if (id.TAG === "Ok") {
    var nickname = (function (extra) {
          return Spice.optionFromJson(Spice.stringFromJson, extra);
        })(Belt_Option.getWithDefault(Js_dict.get(dict$1, "nickname"), null));
    if (nickname.TAG === "Ok") {
      var language = language_decode(Belt_Option.getWithDefault(Js_dict.get(dict$1, "language"), null));
      if (language.TAG === "Ok") {
        return {
                TAG: "Ok",
                _0: {
                  id: id._0,
                  nickname: nickname._0,
                  language: language._0
                }
              };
      }
      var e = language._0;
      return {
              TAG: "Error",
              _0: {
                path: ".language" + e.path,
                message: e.message,
                value: e.value
              }
            };
    }
    var e$1 = nickname._0;
    return {
            TAG: "Error",
            _0: {
              path: ".nickname" + e$1.path,
              message: e$1.message,
              value: e$1.value
            }
          };
  }
  var e$2 = id._0;
  return {
          TAG: "Error",
          _0: {
            path: ".id" + e$2.path,
            message: e$2.message,
            value: e$2.value
          }
        };
}

var data = {
    "id": 1,
    "nickname": "bob",
    "language": "ReScript"
  };

var user = user_decode(data);

var json = user_encode(Belt_Result.getExn(user));

var language = language_decode("ReScript");

exports.language_encode = language_encode;
exports.language_decode = language_decode;
exports.user_encode = user_encode;
exports.user_decode = user_decode;
exports.data = data;
exports.user = user;
exports.json = json;
exports.language = language;
/* user Not a pure module */
